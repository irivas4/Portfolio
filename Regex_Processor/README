Itel Rivas, irivas4

I did not define any additional functions and soley implemented the match and read_file functions in functions.c.
I implemented the read_file function to save the words located in the file passed in into an array, I didnt choose
to have this function read the amount of words that would be in the file because I wanted to do that in main in
order to be able to more easily check for inconsistencies in the file if the amount of words were less than promised.
I did this by have the read_file function return the amount of words it was able to store in the array passed in.
If its less than what was promised I print to stderr and return a non-zero value. If there are more words than promised
read_file simply ignores them and stops when it reaches the promised amount. The next function I implemented was the match
function which uses recrusion to find every possible match to the regex provided. The *, ?, and ~ sections of this function
all implement two versions of recrusion, one where we let the special pattern ex. '*a" match the 'a' in the word passed in
and another recrusion implemnation where '*a' doesnt match anything. This is done because there are various different ways
to match the regex and the differnt "types" of recrusion allow for that. The recrusion decides whether the word should
be cut down as is the case when we allow the "*a" or pattern match a ltter in the word. If that doesnt work to find a match
the other recrusion statement gets to work and instead cuts down the regex as it doesnt allow that part of the pattern match
with the letter in the word. Finally we have a standard comparison which is our base case when there is not special character
as the next char so we simply compare the letters and return one when they match if they dont match we return 0; If 0 is
returned anywhere in the function ie. there was not a match somewhere the word is considered not a match and we return a 0.
If there was a match we return 1.We go through the words in the array using a for loop that runs them through the match
function. The way I keep track of whether there were any matches is using a counter which increases if there was a match
as whats returned is 1 so I add it to 'matches'. If 'matches' is still 0 once the for loop compares all the words in the
array we print a statement saying there were no matches. The only way to signal to the program that you no longer want to
enter regex patterns is by using ctrl+d so I used a while loop that checks if -1 was entered using a scanner and a variable 'parse'
that checks how many things were read. When the user presses ctrl+d 'parse' updates to -1 and we exit out of the while loop.